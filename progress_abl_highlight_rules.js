/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /home/johnc/abl.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var ProgressABLHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "comment.block.source.abl",
            regex: /\/\*/,
            push: [{
                token: "comment.block.source.abl",
                regex: /\*\/(?![^\/]*?\*\/)/,
                next: "pop"
            }, {
                defaultToken: "comment.block.source.abl"
            }]
        }, {
            token: "string.single.source.abl",
            regex: /'(?:'|.)*?'/,
            comment: "Single quoted string"
        }, {
            token: "string.double.source.abl",
            regex: /""[a-zA-Z0-9_\.\-]+""/
        }, {
            token: "string.double.complex.abl",
            regex: /"(?!"[a-zA-Z]+)|""[a-zA-Z]+/,
            push: [{
                token: "string.double.complex.abl",
                regex: /"(?!")/,
                next: "pop"
            }, {
                token: "constant.character.escape.abl",
                regex: /~(?:x[\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)|""/
            }, {
                defaultToken: "string.double.complex.abl"
            }]
        }, {
            token: "constant.numeric.source.abl",
            regex: "(?<!\\w)(?:0(?:x|X)[0-9a-fA-F]+|[0-9]+(?:\\.[0-9]+)?)",
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "(?<!\\w)((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))"
        }, {
            token: "constant.language.source.abl",
            regex: /\b(?:true|false|yes|no(?!-))\b/,
            caseInsensitive: true
        }, {
            token: "keyword.operator.source.abl",
            regex: /\b(?:or|and|not|is)\b|(?:=|\+| - |\/|<|>|,)/,
            caseInsensitive: true
        }, {
            token: "keyword.option.source.abl",
            regex: /\b(?:no-undo|no-box|no-labels|no-lock|no-error|format|colon|label|initial|side-labels|width|primary|use-index)\b|@/,
            caseInsensitive: true
        }, {
            token: "keyword.statement.source.abl",
            regex: /\b(?:enable|disable|display|delete|create|update|assign|import(?: unformatted)?|input\s+(?:from|close)|with|skip)\b/,
            caseInsensitive: true
        }, {
            token: "keyword.type.source.abl",
            regex: /\b(?:as|for(?!\s+(?:each|first|last)))\b/,
            caseInsensitive: true
        }, {
            token: [
                "keyword.type.source.abl",
                "text",
                "storage.type.source.abl"
            ],
            regex: /\b(like)(\s+)([a-zA-Z0-9_\.-]+)/,
            caseInsensitive: true
        }, {
            token: "keyword.control.source.abl",
            regex: "\\b(?:if|available|down|where|else(?: if)?|for\\s+(?:each|first|last)|do while|repeat(?:\\s+while)?|find(?: first|last)?|then(?: do(?: transaction)?)?|next|page|quit)\\b|(?<!-)\\bend\\b(?!\\s+procedure)",
            caseInsensitive: true,
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "(?i)(\\b(if|available|down|where|else( if)?|for\\s+(each|first|last)|do while|repeat(\\s+while)?|find( first|last)?|then( do( transaction)?)?|next|page|quit)\\b|(?<!-)(\\bend\\b(?!\\s+procedure)))"
        }, {
            token: "storage.type.define.abl",
            regex: /\b(?:define\s+(?:(?:(?:new\s+)?shared\s+)?(?:variable|stream|buffer)|(?:input|input-output|output)\s+parameter|temp-table|query)|form)\b/,
            caseInsensitive: true
        }, {
            token: "storage.type.source.abl",
            regex: "\\b(?<!&)(?:character|(?<!-)handle|dataset-handle|dataset|field|(?<!-)index|logical|integer|stream|frame [a-z]+)(?!\\s*\\()\\b",
            caseInsensitive: true,
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "(?i)\\b(?<!&)(character|(?<!-)handle|dataset-handle|dataset|field|(?<!-)index|logical|integer|stream|frame [a-z]+)(?!\\s*\\()\\b"
        }, {
            token: "storage.type.function.abl",
            regex: /end procedure/,
            caseInsensitive: true
        }, {
            token: "support.function.source.abl",
            regex: /\b[a-z][a-z0-9_-]*?\b\s*(?=\s*\(.*?\))/,
            caseInsensitive: true
        }, {
            token: [
                "keyword.statement.source.abl",
                "support.function.abl",
                "support.function.source.abl",
                "support.function.abl"
            ],
            regex: /\b(run)( )([a-z][a-z0-9_-]*?)\b((?:\s*\(.*?\))?)/,
            caseInsensitive: true
        }, {
            token: [
                "storage.type.function.abl",
                "meta.function.source.abl",
                "entity.name.function.abl",
                "meta.function.source.abl"
            ],
            regex: /(procedure)(\s+)([a-z0-9_-]+)(:)/,
            caseInsensitive: true
        }, {
            token: "support.function.source.abl",
            regex: /\{[a-z0-9_\.\/-]+/,
            caseInsensitive: true
        }, {
            token: "support.function.source.abl",
            regex: /\}/
        }]
    }
    
    this.normalizeRules();
};

ProgressABLHighlightRules.metaData = {
    fileTypes: ["p", "i"],
    name: "Progress ABL",
    scopeName: "source.abl"
}


oop.inherits(ProgressABLHighlightRules, TextHighlightRules);

exports.ProgressABLHighlightRules = ProgressABLHighlightRules;
});